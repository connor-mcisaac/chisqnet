#! /usr/bin/env python

import sys
import argparse
import h5py
import numpy as np
from chisqnet.filtering import select_transformation
from pycbc import waveform
import tensorflow as tf
import pycbc.results


parser = argparse.ArgumentParser()

parser = argparse.ArgumentParser()
parser.add_argument("--model-file", required=True,
                    help="File containing model to be plotted")
parser.add_argument("--bank-file", required=True,
                    help="File containing bank to be plotted")

parser.add_argument("--transformation", required=True,
                    help="The type of transformation to be used")

parser.add_argument("--output-file", required=True,
                    help="Location of the output file")

args = parser.parse_args()

transform_class = select_transformation(args.transformation)

with h5py.File(args.model_file, 'r') as f:
     epoch = f.attrs['epoch']
     thresh = f['thresh_epoch_{0}'.format(epoch)][0]

transform = transform_class.from_file(
     args.model_file,
     np.arange(10), 1., 10.,
     group="model_epoch_{0}".format(epoch)
)

bank = waveform.TemplateBank(args.bank_file)
fig, ax = transform.plot_model(bank, title="threshold = {0:.4f}".format(thresh))

caption = "This is a plot of the trained model after all training is complete."

pycbc.results.save_fig_with_metadata(fig, args.output_file,
     title='Trained Model',
     caption=caption,
     cmd=' '.join(sys.argv))
