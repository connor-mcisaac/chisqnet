#! /usr/bin/env python

import argparse
import logging
import h5py
import numpy as np
from chisqnet.preprocessing import DataCollector, AttributeCollector


parser = argparse.ArgumentParser()

# Gather inputs from preprocessing step
parser.add_argument("--model-file", required=True,
                    help="The file containing models from throughout training")

# Gather output options
parser.add_argument("--output-model-file", required=True,
                    help="Output location for model file")
parser.add_argument("--output-txt-file", required=True,
                    help="Output location for txt file containing config file outputs.")

# Gather additional options
parser.add_argument("--epoch", type=int,
                    help="The epoch of the model to output, default to the latest epoch.")
parser.add_argument("--verbose", action='store_true')

args = parser.parse_args()

if args.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARNING
logging.basicConfig(format='%(asctime)s : %(message)s', level=log_level)

file_attrs = AttributeCollector(check=False)
file_data = DataCollector()

epoch = args.epoch
with h5py.File(args.model_file, 'r') as f:
    if epoch is None:
        epoch = f.attrs['epoch']
    g = f['model_epoch_{0}'.format(epoch)]
    file_attrs.get_root(g)
    g.visititems(file_attrs)
    g.visititems(file_data)
file_data.concatenate_datasets()

with h5py.File(args.output_model_file, 'w') as f:
    
    for group, attrs in file_attrs.groups.items():
        if group not in f:
            g = f.create_group(group)
        else:
            g = f[group]

        for k, v in attrs.items():
            g.attrs[k] = v

    for k, v in file_data.datasets.items():
        _ = f.create_dataset(k, data=v)

with open(args.output_txt_file, 'w') as f:
    options = 'statistic-keywords ='
    options += ' sngl_ranking_threshold:{0}'.format(file_data.datasets['threshold'][0])
    options += ' sngl_ranking_power:{0}'.format(file_data.datasets['power'][0])
    options += ' sngl_ranking_constant:{0}'.format(file_data.datasets['constant'][0])
    options += '\n\n'
    options += 'chisqnet-threshold = {0}\n'.format(file_data.datasets['threshold'][0])
    options += 'chisqnet-power = {0}\n'.format(file_data.datasets['power'][0])
    options += 'chisqnet-constant = {0}\n'.format(file_data.datasets['constant'][0])

    f.write(options)

logging.info("Done!")
