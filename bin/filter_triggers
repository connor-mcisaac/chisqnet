#! /usr/bin/env python

import argparse
import logging
import h5py
from chisqnet.preprocessing import TriggerList, InjectionTriggers


parser = argparse.ArgumentParser()

# Gather inputs from search workflow used to select data for training
parser.add_argument("--trigger-files", nargs='+', required=True,
                    help="List of single detector trigger files used to "
                         "select sample times for training")
parser.add_argument("--injfind-file", required=False,
                    help="Injfind file used to select observable "
                         "injections for use in training")
parser.add_argument("--veto-files", nargs='+', required=True,
                    help='Segment files conatining the "closed_box" veto '
                         'used to remove foreground triggers')
parser.add_argument("--bank-file", required=True,
                    help="Template bank file used in search workflow")

# Gather output options
parser.add_argument("--output-file", required=True,
                    help="Output location for training sample times")

# Gather inputs for filtering triggers
parser.add_argument("--snr-cut", type=float, default=0,
                    help="Threshold for removing triggers below snr")
parser.add_argument("--newsnr-cut", type=float, default=0,
                    help="Threshold for removing triggers below newsnr")
parser.add_argument("--newsnr-sg-cut", type=float, default=0,
                    help="Threshold for removing triggers below newsnr_sg")
parser.add_argument("--cluster-param",
                    help="Parameter to use when clustering triggers")
parser.add_argument("--cluster-window", type=float,
                    help="Window in seconds to use when clustering triggers")

# Gather additional options
parser.add_argument("--verbose", action='store_true')

args = parser.parse_args()

if args.verbose:
    log_level = logging.DEBUG
else:
    log_level = logging.WARNING
logging.basicConfig(format='%(asctime)s : %(message)s', level=log_level)

logging.info("Reading triggers from files.")
if args.injfind_file is None:
    triggers = TriggerList(args.trigger_files)
else: 
    trigger_dict = {}
    for fp in args.trigger_files:
        with h5py.File(fp, 'r') as f:
            if len(f.keys()) > 1:
                raise ValueError("Each trigger file should only have 1 group with the ifo as key.")
            ifo = list(f.keys())[0]
        if ifo in trigger_dict.keys():
            raise ValueError("Multiple trigger files for {0}.".format(ifo))
        trigger_dict[ifo] = fp
    triggers = InjectionTriggers(args.injfind_file, trigger_dict)

triggers.apply_segments(args.veto_files, "closed_box", within=False)

logging.info("Triggers available:")
for k, v in triggers.nums.items():
    logging.info("{0}: {1}".format(k, v))
    
args.newsnr_cut = max(args.newsnr_cut, args.newsnr_sg_cut)
args.snr_cut = max(args.snr_cut, args.newsnr_cut)

if args.snr_cut:
    triggers.threshold_cut(args.snr_cut, 'snr')
    
if args.newsnr_cut:
    triggers.get_newsnr()
    triggers.threshold_cut(args.newsnr_cut, 'newsnr')

if args.newsnr_sg_cut:
    triggers.get_newsnr_sg()
    triggers.threshold_cut(args.newsnr_sg_cut, 'newsnr_sg')

logging.info("Triggers available after threshold cuts:")
for k, v in triggers.nums.items():
    logging.info("{0}: {1}".format(k, v))

if args.cluster_param and args.cluster_window:
    triggers.cluster_over_time(args.cluster_window, args.cluster_param)

logging.info("Triggers available after clustering:")
for k, v in triggers.nums.items():
    logging.info("{0}: {1}".format(k, v))

triggers.get_bank_params(args.bank_file)

logging.info("Saving triggers")
triggers.write_to_hdf(args.output_file)

logging.info("Done!")
